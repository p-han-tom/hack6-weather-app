{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","setLocation","position","setState","lat","coords","latitude","lon","longitude","undefined","state","getWeather","options","method","url","params","exclude","units","appid","process","self","axios","request","then","response","weather","data","console","dir","depth","catch","error","parseTime","unixTime","hours","Date","getHours","ampm","updateHeaderClock","currentTime","minutes","getMinutes","seconds","getSeconds","timeString","toDateString","time","generateHourlyReport","reports","hourlyWeather","hourly","i","push","Card","className","Header","id","dt","src","icon","alt","Math","round","temp","ListGroup","Item","pop","navigator","geolocation","getCurrentPosition","setInterval","Object","keys","this","length","Row","Col","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eed3cb56.chunk.js","sourcesContent":["import './App.css';\nimport axios from \"axios\"\nimport React from 'react';\nimport { Row, Col, Card, ListGroup } from 'react-bootstrap';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      weather: {},\n      lat: undefined,\n      lon: undefined,\n    };\n\n    navigator.geolocation.getCurrentPosition(this.setLocation, () => {/* handle permission denied here */ });\n    setInterval(this.updateHeaderClock, 1000);\n  }\n\n  setLocation = (position) => {\n    this.setState({ lat: position.coords.latitude });\n    this.setState({ lon: position.coords.longitude });\n    if (this.state.lat !== undefined && this.state.lon !== undefined) {\n      this.getWeather();\n    }\n  }\n\n\n  // BACKEND DO NOT TOUCH\n  getWeather = () => {\n    let options = {\n      method: 'GET',\n      url: 'https://api.openweathermap.org/data/2.5/onecall?',\n      params: {\n        lat: this.state.lat,\n        lon: this.state.lon,\n        exclude: \"current,minutely,daily\",\n        units: \"metric\",\n        appid: process.env.REACT_APP_API_KEY\n      },\n    };\n\n    const self = this;\n    axios.request(options).then(function (response) {\n      self.setState({ weather: response.data });\n      console.dir(response.data, { depth: null });\n    }).catch(function (error) {\n      console.error(error);\n    });\n\n  }\n\n  parseTime = (unixTime) => {\n    let hours = new Date(unixTime * 1000).getHours();\n    let ampm = hours > 11 ? \"PM\" : \"AM\";\n    hours = hours < 10 ? \"0\"+hours : hours;\n    return hours + \":00 \" + ampm;\n  }\n\n  updateHeaderClock = () => {\n    let currentTime = new Date();\n    let hours = currentTime.getHours();\n    let minutes = currentTime.getMinutes();\n    let seconds = currentTime.getSeconds();\n    let ampm = hours > 11 ? \"PM\" : \"AM\";\n    minutes = minutes < 10 ? \"0\" + minutes : minutes;\n    seconds = seconds < 10 ? \"0\" + seconds : seconds;\n    let timeString = currentTime.toDateString() + \", \" + hours + \":\" + minutes + \":\" + seconds + \" \" + ampm;\n    this.setState({ time: timeString });\n  }\n\n  /*\n  Each hourly weather index looks like this\n  0:\n    clouds: 3\n    dew_point: 17.37\n    dt: 1629518400\n    feels_like: 20.24\n    humidity: 85\n    pop: 0 (0 -> 1 with 1 = 100%)\n    pressure: 1013\n    temp: 19.97 (celsius)\n    uvi: 0\n    visibility: 10000\n    weather: Array(1)\n      0:\n      description: \"clear sky\"\n      icon: \"01n\"\n      id: 800\n      main: \"Clear\"\n    wind_deg: 315\n    wind_gust: 1.52\n    wind_speed: 1.4\n  */\n\n  generateHourlyReport = () => {\n    let reports = [];\n    let hourlyWeather = this.state.weather.hourly;\n    for (let i = 0; i < 12; i++) {\n      reports.push(\n        <Card className=\"hour-cards\">\n          <Card.Header>\n            <div id=\"hour-header\">{this.parseTime(hourlyWeather[i].dt)}</div>\n            <img id=\"weather-icons\" src={\"http://openweathermap.org/img/wn/\" + hourlyWeather[i].weather[0].icon + \"@2x.png\"} alt=\"\" />\n            {Math.round(hourlyWeather[i].temp)}Â°C\n          </Card.Header>\n          <ListGroup>\n            <ListGroup.Item>\n              P.O.P: {hourlyWeather[i].pop * 100}%\n            </ListGroup.Item>\n            {/* Fill with more group items, e.g. cloudiness, windiness, humidity, etc */}\n            {/* Expand to show more if things get to cluttered? */}\n          </ListGroup>\n        </Card>\n\n      );\n    }\n    return reports;\n  }\n\n  render() {\n\n    if (Object.keys(this.state.weather).length > 0) {\n      return (\n        <div>\n          {/* HEADER */}\n          <Row>\n            <Col id = \"greeting\">\n              Greetings! Today is {this.state.time}\n            </Col>\n            <Col id = \"approx-location\">\n              (TODO: Nearest City)\n            </Col>\n          </Row>\n\n          {/* ANCHOR: HOURLY REPORT AND WEATHER TIPS */}\n          <Row>\n            {/* Hourly reports */}\n            <Col>\n              {this.generateHourlyReport()}\n            </Col>\n\n            {/* Weather tips in four hour intervals */}\n            <Col>\n\n            </Col>\n\n          </Row>\n        </div>\n      );\n    } else {\n      return (\n        //Handle loading screen\n        <div>loading</div>\n      )\n    }\n\n  }\n}\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}